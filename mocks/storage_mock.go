// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	domain "github.com/redblood-pixel/pastebin/internal/domain"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreatePaste mocks base method.
func (m *MockDatabase) CreatePaste(ctx context.Context, tx pgx.Tx, paste domain.Paste, userID int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaste", ctx, tx, paste, userID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaste indicates an expected call of CreatePaste.
func (mr *MockDatabaseMockRecorder) CreatePaste(ctx, tx, paste, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaste", reflect.TypeOf((*MockDatabase)(nil).CreatePaste), ctx, tx, paste, userID)
}

// CreatePastePassword mocks base method.
func (m *MockDatabase) CreatePastePassword(ctx context.Context, tx pgx.Tx, pasteID uuid.UUID, passwordHashed string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastePassword", ctx, tx, pasteID, passwordHashed)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePastePassword indicates an expected call of CreatePastePassword.
func (mr *MockDatabaseMockRecorder) CreatePastePassword(ctx, tx, pasteID, passwordHashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastePassword", reflect.TypeOf((*MockDatabase)(nil).CreatePastePassword), ctx, tx, pasteID, passwordHashed)
}

// CreateSession mocks base method.
func (m *MockDatabase) CreateSession(ctx context.Context, tx pgx.Tx, userID int, expireAt time.Duration) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, tx, userID, expireAt)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDatabaseMockRecorder) CreateSession(ctx, tx, userID, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDatabase)(nil).CreateSession), ctx, tx, userID, expireAt)
}

// CreateTx mocks base method.
func (m *MockDatabase) CreateTx(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockDatabaseMockRecorder) CreateTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockDatabase)(nil).CreateTx), ctx)
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(ctx context.Context, tx pgx.Tx, name, email, password_hashed string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, name, email, password_hashed)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(ctx, tx, name, email, password_hashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), ctx, tx, name, email, password_hashed)
}

// DeletePasteByID mocks base method.
func (m *MockDatabase) DeletePasteByID(ctx context.Context, tx pgx.Tx, pasteID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasteByID", ctx, tx, pasteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasteByID indicates an expected call of DeletePasteByID.
func (mr *MockDatabaseMockRecorder) DeletePasteByID(ctx, tx, pasteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasteByID", reflect.TypeOf((*MockDatabase)(nil).DeletePasteByID), ctx, tx, pasteID)
}

// DeletePastes mocks base method.
func (m *MockDatabase) DeletePastes(ctx context.Context, tx pgx.Tx, pastesID []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastes", ctx, tx, pastesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastes indicates an expected call of DeletePastes.
func (mr *MockDatabaseMockRecorder) DeletePastes(ctx, tx, pastesID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastes", reflect.TypeOf((*MockDatabase)(nil).DeletePastes), ctx, tx, pastesID)
}

// DeleteSessionById mocks base method.
func (m *MockDatabase) DeleteSessionById(ctx context.Context, tx pgx.Tx, sessionID uuid.UUID) (int, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionById", ctx, tx, sessionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSessionById indicates an expected call of DeleteSessionById.
func (mr *MockDatabaseMockRecorder) DeleteSessionById(ctx, tx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionById", reflect.TypeOf((*MockDatabase)(nil).DeleteSessionById), ctx, tx, sessionID)
}

// FindUserByNameOrEmail mocks base method.
func (m *MockDatabase) FindUserByNameOrEmail(ctx context.Context, nameOrEmail string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByNameOrEmail", ctx, nameOrEmail)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserByNameOrEmail indicates an expected call of FindUserByNameOrEmail.
func (mr *MockDatabaseMockRecorder) FindUserByNameOrEmail(ctx, nameOrEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByNameOrEmail", reflect.TypeOf((*MockDatabase)(nil).FindUserByNameOrEmail), ctx, nameOrEmail)
}

// GetPasteByID mocks base method.
func (m *MockDatabase) GetPasteByID(ctx context.Context, tx pgx.Tx, pasteID uuid.UUID) (domain.Paste, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasteByID", ctx, tx, pasteID)
	ret0, _ := ret[0].(domain.Paste)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasteByID indicates an expected call of GetPasteByID.
func (mr *MockDatabaseMockRecorder) GetPasteByID(ctx, tx, pasteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasteByID", reflect.TypeOf((*MockDatabase)(nil).GetPasteByID), ctx, tx, pasteID)
}

// GetUserById mocks base method.
func (m *MockDatabase) GetUserById(ctx context.Context, userID int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockDatabaseMockRecorder) GetUserById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockDatabase)(nil).GetUserById), ctx, userID)
}

// GetUsersPastes mocks base method.
func (m *MockDatabase) GetUsersPastes(ctx context.Context, tx pgx.Tx, userID int, filters domain.PasteFilters) ([]domain.Paste, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersPastes", ctx, tx, userID, filters)
	ret0, _ := ret[0].([]domain.Paste)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersPastes indicates an expected call of GetUsersPastes.
func (mr *MockDatabaseMockRecorder) GetUsersPastes(ctx, tx, userID, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPastes", reflect.TypeOf((*MockDatabase)(nil).GetUsersPastes), ctx, tx, userID, filters)
}

// UpdateLastVisited mocks base method.
func (m *MockDatabase) UpdateLastVisited(ctx context.Context, tx pgx.Tx, pasteID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastVisited", ctx, tx, pasteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastVisited indicates an expected call of UpdateLastVisited.
func (mr *MockDatabaseMockRecorder) UpdateLastVisited(ctx, tx, pasteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastVisited", reflect.TypeOf((*MockDatabase)(nil).UpdateLastVisited), ctx, tx, pasteID)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreatePaste mocks base method.
func (m *MockStorage) CreatePaste(ctx context.Context, name string, ttl time.Time, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaste", ctx, name, ttl, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePaste indicates an expected call of CreatePaste.
func (mr *MockStorageMockRecorder) CreatePaste(ctx, name, ttl, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaste", reflect.TypeOf((*MockStorage)(nil).CreatePaste), ctx, name, ttl, data)
}

// DeletePaste mocks base method.
func (m *MockStorage) DeletePaste(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaste", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaste indicates an expected call of DeletePaste.
func (mr *MockStorageMockRecorder) DeletePaste(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaste", reflect.TypeOf((*MockStorage)(nil).DeletePaste), ctx, name)
}

// DeletePastes mocks base method.
func (m *MockStorage) DeletePastes(ctx context.Context, userID int, pastesID []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastes", ctx, userID, pastesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastes indicates an expected call of DeletePastes.
func (mr *MockStorageMockRecorder) DeletePastes(ctx, userID, pastesID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastes", reflect.TypeOf((*MockStorage)(nil).DeletePastes), ctx, userID, pastesID)
}

// GetPaste mocks base method.
func (m *MockStorage) GetPaste(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaste", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaste indicates an expected call of GetPaste.
func (mr *MockStorageMockRecorder) GetPaste(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaste", reflect.TypeOf((*MockStorage)(nil).GetPaste), ctx, name)
}
