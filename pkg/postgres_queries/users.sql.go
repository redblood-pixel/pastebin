// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package postgres_queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO tokens (user_id, issued_at, expires_at)
VALUES($1, $2, $3) RETURNING id
`

type CreateSessionParams struct {
	UserID    int32
	IssuedAt  time.Time
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.IssuedAt, arg.ExpiresAt)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password_hashed)
VALUES ($1, $2, $3) RETURNING id
`

type CreateUserParams struct {
	Name           string
	Email          string
	PasswordHashed string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.PasswordHashed)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteById = `-- name: DeleteById :one
DELETE FROM tokens WHERE id=$1 RETURNING user_id, expires_at
`

type DeleteByIdRow struct {
	UserID    int32
	ExpiresAt time.Time
}

func (q *Queries) DeleteById(ctx context.Context, id uuid.UUID) (DeleteByIdRow, error) {
	row := q.db.QueryRow(ctx, deleteById, id)
	var i DeleteByIdRow
	err := row.Scan(&i.UserID, &i.ExpiresAt)
	return i, err
}

const findUserByNameOrEmail = `-- name: FindUserByNameOrEmail :one
SELECT id, password_hashed FROM users
WHERE name=$1 OR email=$1
`

type FindUserByNameOrEmailRow struct {
	ID             int32
	PasswordHashed string
}

func (q *Queries) FindUserByNameOrEmail(ctx context.Context, nameOrEmail string) (FindUserByNameOrEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByNameOrEmail, nameOrEmail)
	var i FindUserByNameOrEmailRow
	err := row.Scan(&i.ID, &i.PasswordHashed)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT name, created_at, last_login FROM users WHERE id=$1
`

type GetUserByIdRow struct {
	Name      string
	CreatedAt time.Time
	LastLogin time.Time
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.Name, &i.CreatedAt, &i.LastLogin)
	return i, err
}
