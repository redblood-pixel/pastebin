// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// CreatePaste provides a mock function for the type MockStorage
func (_mock *MockStorage) CreatePaste(ctx context.Context, name string, ttl time.Time, data []byte) error {
	ret := _mock.Called(ctx, name, ttl, data)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaste")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, []byte) error); ok {
		r0 = returnFunc(ctx, name, ttl, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_CreatePaste_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaste'
type MockStorage_CreatePaste_Call struct {
	*mock.Call
}

// CreatePaste is a helper method to define mock.On call
//   - ctx
//   - name
//   - ttl
//   - data
func (_e *MockStorage_Expecter) CreatePaste(ctx interface{}, name interface{}, ttl interface{}, data interface{}) *MockStorage_CreatePaste_Call {
	return &MockStorage_CreatePaste_Call{Call: _e.mock.On("CreatePaste", ctx, name, ttl, data)}
}

func (_c *MockStorage_CreatePaste_Call) Run(run func(ctx context.Context, name string, ttl time.Time, data []byte)) *MockStorage_CreatePaste_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].([]byte))
	})
	return _c
}

func (_c *MockStorage_CreatePaste_Call) Return(err error) *MockStorage_CreatePaste_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_CreatePaste_Call) RunAndReturn(run func(ctx context.Context, name string, ttl time.Time, data []byte) error) *MockStorage_CreatePaste_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePaste provides a mock function for the type MockStorage
func (_mock *MockStorage) DeletePaste(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeletePaste")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeletePaste_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePaste'
type MockStorage_DeletePaste_Call struct {
	*mock.Call
}

// DeletePaste is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockStorage_Expecter) DeletePaste(ctx interface{}, name interface{}) *MockStorage_DeletePaste_Call {
	return &MockStorage_DeletePaste_Call{Call: _e.mock.On("DeletePaste", ctx, name)}
}

func (_c *MockStorage_DeletePaste_Call) Run(run func(ctx context.Context, name string)) *MockStorage_DeletePaste_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_DeletePaste_Call) Return(err error) *MockStorage_DeletePaste_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeletePaste_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockStorage_DeletePaste_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePastes provides a mock function for the type MockStorage
func (_mock *MockStorage) DeletePastes(ctx context.Context, userID int, pastesID []uuid.UUID) error {
	ret := _mock.Called(ctx, userID, pastesID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePastes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, []uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userID, pastesID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeletePastes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePastes'
type MockStorage_DeletePastes_Call struct {
	*mock.Call
}

// DeletePastes is a helper method to define mock.On call
//   - ctx
//   - userID
//   - pastesID
func (_e *MockStorage_Expecter) DeletePastes(ctx interface{}, userID interface{}, pastesID interface{}) *MockStorage_DeletePastes_Call {
	return &MockStorage_DeletePastes_Call{Call: _e.mock.On("DeletePastes", ctx, userID, pastesID)}
}

func (_c *MockStorage_DeletePastes_Call) Run(run func(ctx context.Context, userID int, pastesID []uuid.UUID)) *MockStorage_DeletePastes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *MockStorage_DeletePastes_Call) Return(err error) *MockStorage_DeletePastes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeletePastes_Call) RunAndReturn(run func(ctx context.Context, userID int, pastesID []uuid.UUID) error) *MockStorage_DeletePastes_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaste provides a mock function for the type MockStorage
func (_mock *MockStorage) GetPaste(ctx context.Context, name string) ([]byte, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPaste")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetPaste_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaste'
type MockStorage_GetPaste_Call struct {
	*mock.Call
}

// GetPaste is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockStorage_Expecter) GetPaste(ctx interface{}, name interface{}) *MockStorage_GetPaste_Call {
	return &MockStorage_GetPaste_Call{Call: _e.mock.On("GetPaste", ctx, name)}
}

func (_c *MockStorage_GetPaste_Call) Run(run func(ctx context.Context, name string)) *MockStorage_GetPaste_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_GetPaste_Call) Return(bytes []byte, err error) *MockStorage_GetPaste_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockStorage_GetPaste_Call) RunAndReturn(run func(ctx context.Context, name string) ([]byte, error)) *MockStorage_GetPaste_Call {
	_c.Call.Return(run)
	return _c
}
